// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	out "github.com/gnnchya/PosCoffee/oAuth/service/token/out"

	tokenin "github.com/gnnchya/PosCoffee/oAuth/service/token/tokenin"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Refresh provides a mock function with given fields: ctx, input, r
func (_m *Service) Refresh(ctx context.Context, input *tokenin.RefreshInput, r *http.Request) (*out.TokenView, error) {
	ret := _m.Called(ctx, input, r)

	var r0 *out.TokenView
	if rf, ok := ret.Get(0).(func(context.Context, *tokenin.RefreshInput, *http.Request) *out.TokenView); ok {
		r0 = rf(ctx, input, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*out.TokenView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tokenin.RefreshInput, *http.Request) error); ok {
		r1 = rf(ctx, input, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request provides a mock function with given fields: ctx, input, r
func (_m *Service) Request(ctx context.Context, input *tokenin.RequestInput, r *http.Request) (*out.TokenView, error) {
	ret := _m.Called(ctx, input, r)

	var r0 *out.TokenView
	if rf, ok := ret.Get(0).(func(context.Context, *tokenin.RequestInput, *http.Request) *out.TokenView); ok {
		r0 = rf(ctx, input, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*out.TokenView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tokenin.RequestInput, *http.Request) error); ok {
		r1 = rf(ctx, input, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: ctx, input
func (_m *Service) RevokeToken(ctx context.Context, input *string) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: ctx, input
func (_m *Service) ValidateToken(ctx context.Context, input *string) (*out.ValidateTokenView, error) {
	ret := _m.Called(ctx, input)

	var r0 *out.ValidateTokenView
	if rf, ok := ret.Get(0).(func(context.Context, *string) *out.ValidateTokenView); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*out.ValidateTokenView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
